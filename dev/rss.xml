<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>주 현 :) Blog</title>
        <link>https://ohju96.github.io/dev</link>
        <description>주 현 :) Blog</description>
        <lastBuildDate>Tue, 02 Jan 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ko</language>
        <item>
            <title><![CDATA[트랜잭션이 이상해요..(feat. 트랜잭션 격리 수준, Isolation Level)]]></title>
            <link>https://ohju96.github.io/dev/1</link>
            <guid>https://ohju96.github.io/dev/1</guid>
            <pubDate>Tue, 02 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[내가 겪언던 문제들]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="내가-겪언던-문제들">내가 겪언던 문제들<a href="https://ohju96.github.io/dev/1#%EB%82%B4%EA%B0%80-%EA%B2%AA%EC%96%B8%EB%8D%98-%EB%AC%B8%EC%A0%9C%EB%93%A4" class="hash-link" aria-label="내가 겪언던 문제들에 대한 직접 링크" title="내가 겪언던 문제들에 대한 직접 링크">​</a></h2>
<p>이전에 회사에서 트랜잭션 격리 수준에 걸려서 고생한 적이 있다. 간단한 예를 들면 재고를 체크하는 부분에서 걸렸는데 아래와 같다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1. 재고 조회</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	2. FOR 구매반복 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		3. 아이템 갯수 감소</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		4. 아이템 네이밍 숫자 증가</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		5. 아이템 생성</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		6. 재고 감소</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		7. 아이템 업데이트</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		8. 재고 업데이트</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위에서 전체 재고를 가져온다. 그리고 구매를 반복하는데 구매하는 만큼 아이템 갯수를 줄여주고 아이템에 붙는 네이밍 숫자를 늘려준 다음 아이템을 생성한다. 마지막으로 아이템과 재고를 업데이트 해주고 새로운 반복을 진행한다.</p>
<p><code>새로운 반복을 진행한다.</code>여기에서 문제가 발생한다. 가져온 재고가 만약 3개다. 첫 번째 반복문을 돌면서 재고가 1개 줄어들었을 때 과연 두 번째 반복문은 그것을 기억하고 있었나?</p>
<p>아니었다. 이게 뭔가 했는데 트랜잭션 격리 수준을 공부하면 알 수 있는 문제였다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션-격리-수준-이전에-알아야-할-것들">트랜잭션 격리 수준 이전에 알아야 할 것들<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80-%EC%9D%B4%EC%A0%84%EC%97%90-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-%EA%B2%83%EB%93%A4" class="hash-link" aria-label="트랜잭션 격리 수준 이전에 알아야 할 것들에 대한 직접 링크" title="트랜잭션 격리 수준 이전에 알아야 할 것들에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션">트랜잭션<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98" class="hash-link" aria-label="트랜잭션에 대한 직접 링크" title="트랜잭션에 대한 직접 링크">​</a></h3>
<p>그럼 트랜잭션 격리 수준은 무엇일까?를 궁금해 하기 전에 트랜잭션의 성질인 ACID를 알아야 한다. 아니 그 전에 트랜잭션은 무엇일까? 여기서부터 시작하는 게 옳겠다.</p>
<p>트랜잭션은 DBMS에서 수행되는 데이터베이스의 상태를 변화시키기 위해 수행되는 논리적인 작업 단위라고 말할 수 있다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1. 재고 조회</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	2. FOR 구매반복 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		3. 아이템 갯수 감소</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		4. 아이템 네이밍 숫자 증가</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		5. 아이템 생성</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		6. 재고 감소</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		7. 아이템 업데이트</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		8. 재고 업데이트</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="��복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 예시를 다시 가져오자. 예를 들어서 내가 아이템 3개를 구매했다. 그럼 저 구매 반복문을 3번 돌아 쿼리가 모두 실행되어 데이터베이스에 적용됨이 마땅하다.</p>
<p>하지만 첫 번째 반복은 성공해서 아이템 하나가 정상적으로 생성되었으나 그 이후 두 번째 반복에서 실패해 두 번째 아이템부터 생성이 되지 않았다고 하자. 그럼 이 구매 실행은 어떻게 되어야 할까?</p>
<ol>
<li>전체가 실패해야 한다.</li>
<li>첫 번째 아이템은 구매 성공, 이후는 실패</li>
</ol>
<p>정답은 1번이다. 이런 트랜잭션의 성질은 이미 공부하기 좋게 정의되어 있다. ACID라 불리는 트랜잭션의 성질이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션의-성질-acid">트랜잭션의 성질 ACID<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%98-%EC%84%B1%EC%A7%88-acid" class="hash-link" aria-label="트랜잭션의 성질 ACID에 대한 직접 링크" title="트랜잭션의 성질 ACID에 대한 직접 링크">​</a></h3>
<ul>
<li>Atomicity 원자성</li>
<li>Consistency 일관성</li>
<li>Isolation 격리, 고립성</li>
<li>Durability 지속성</li>
</ul>
<p>각각 성질은 무엇을 뜻할까?</p>
<p><strong>원자성</strong>은 하나의 트랜잭션이 모두 성공하거나 모두 실패해야 하는 성질을 말한다. 즉, 위에서 예시로 실행한 구매 작업은 전체가 실패하거나 전체가 성공해야 한다는 말이다. 때문에 위에 예시의 정답은 1번이 되겠다.</p>
<p><strong>일관성</strong>은 트랜잭션이 완료된 이후에도 데이터베이스의 상태가 일관되어야 한다는 말인데 데이터베이스의 무결성을 말한다. 구매를 하고 구매 장부를 기록한다 했을 때 구매에 대한 구매 장부 데이터가 빠지면 안 된다. 이런 일관성을 말하기도 하고 기본 키, 왜리 키 같은 제약 조건을 지키면서 트랜잭션을 수행하는 것을 의미하기도 한다.</p>
<p><strong>고립성</strong>은 하나의 트랜잭션이 작업을 수행중일 때 다른 트랜잭션이 끼어들지 못 하도록 보장해 트랜잭션끼리의 영향이나 간섭이 없도록 하는 것이다.</p>
<p><strong>지속성</strong>은 트랜잭션이 성공적으로 수행되고 난 뒤에 트랜잭션에 대한 로그가 남아 결과가 안정적으로 보존되어야 하고 영구적으로 반영되어야 한다는 말이다.</p>
<p>트랜잭션은 <strong>commit</strong>과 <strong>rollback</strong>을 통해 하나의 작업을 성공적으로 완료 혹은 작업 취소를 결정할 수 있으며 Auto commit 옵션이 적용이 Default인 경우가 있어 잘 체크하고 사용해야 한다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션-격리-수준">트랜잭션 격리 수준<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80" class="hash-link" aria-label="트랜잭션 격리 수준에 대한 직접 링크" title="트랜잭션 격리 수준에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션-격리-수준의-정의들">트랜잭션 격리 수준의 정의들<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80%EC%9D%98-%EC%A0%95%EC%9D%98%EB%93%A4" class="hash-link" aria-label="트랜잭션 격리 수준의 정의들에 대한 직접 링크" title="트랜잭션 격리 수준의 정의들에 대한 직접 링크">​</a></h3>
<p>트랜잭션 격리 수준은 비슷하거나 똑같은 말이지만 이렇게 정의한다.</p>
<ul>
<li>동시에 여러 트랜잭션이 처리될 때 트랜잭션끼리 얼마나 서로 고립되어 있는지를 나타내는 것.</li>
<li>특정 트랜잭션이 다른 트랜잭션에 변경한 데이터를 볼 수 있도록 허용할지 말지 결정하는 것.</li>
<li>여러 트랜잭션이 동시에 처리될 때 특정 트랜잭션이 다른 트랜잭션에서 변경하거나 조회하는 데이터를 볼 수 있게 허용할지 여부를 결정하는 것.</li>
<li>여러 트랜잭션이 다른 트랜잭션에서 변경하거나 조회하는 데이터를 볼 수 있도록 허용할지 말지를 결정하는 것.</li>
</ul>
<p>요약하자면 트랜잭션이 서로 고립된 정도를 나타내며 다른 트랜잭션에서 변경한 데이터를 볼 것인지 결정하는 것.쯤 되겠다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션-격리-수준-구분">트랜잭션 격리 수준 구분<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80-%EA%B5%AC%EB%B6%84" class="hash-link" aria-label="트랜잭션 격리 수준 구분에 대한 직접 링크" title="트랜잭션 격리 수준 구분에 대한 직접 링크">​</a></h3>
<p>그럼 그 고립된 정도를 나타낸다는 지표는 어떻게 구분되는지 보자면 아래와 같다.</p>
<p>트랜잭션 격리 수준은 위에서 아래로 높아진다고 보면 된다.</p>
<ul>
<li>Read uncommited (0)</li>
<li>Read committed (1)</li>
<li>Repeatable read (2)</li>
<li>Serializable (3)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="주의해야-하는-부분">주의해야 하는 부분<a href="https://ohju96.github.io/dev/1#%EC%A3%BC%EC%9D%98%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84" class="hash-link" aria-label="주의해야 하는 부분에 대한 직접 링크" title="주의해야 하는 부분에 대한 직접 링크">​</a></h3>
<p>트랜잭션 격리 수준이 높아질 수록 격리성으로 인한 이슈는 적게 발생하겠지만 동시 처리 성능이 떨어지기 때문에 성능 요구사항과 데이터 무결성을 고려해 적절한 수준을 찾아야 한다.</p>
<p>간단히 격리 수준에 대해서 알아보자면 아래와 같다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="read-uncommitted">Read uncommitted<a href="https://ohju96.github.io/dev/1#read-uncommitted" class="hash-link" aria-label="Read uncommitted에 대한 직접 링크" title="Read uncommitted에 대한 직접 링크">​</a></h4>
<p>Read uncommitted는 commit이나 rollback 상관 없이 다른 트랜잭션에서 조회할 수 있다. 이는 데이터 정합성에 문제가 있기 때문에 권장되지 않는다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="read-committed">Read committed<a href="https://ohju96.github.io/dev/1#read-committed" class="hash-link" aria-label="Read committed에 대한 직접 링크" title="Read committed에 대한 직접 링크">​</a></h4>
<p>DBMS에서 가장 많이 사용되는 격리 수준으로 트랜잭션 변경 내용이 commit 되어야만 다른 트랜잭션에서 조회할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="repeatable-read">Repeatable read<a href="https://ohju96.github.io/dev/1#repeatable-read" class="hash-link" aria-label="Repeatable read에 대한 직접 링크" title="Repeatable read에 대한 직접 링크">​</a></h4>
<p>트랜잭션이 시작되기 전에 커밋된 내용에 대해서만 조회할 수 있는 격리 수준이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="serializable">Serializable<a href="https://ohju96.github.io/dev/1#serializable" class="hash-link" aria-label="Serializable에 대한 직접 링크" title="Serializable에 대한 직접 링크">​</a></h4>
<p>InnoDB에서 순수한 SELECT는 어떤 잠금도 없이 동작하는데 이때 공유 잠금을 설정하여 다른 트랜잭션에서 레코드 변경을 할 수 없게 만든다. 즉, SELECT가 사용되는 데이터들에 Shared Lock을 걸기 때문에 동시 처리 능력이 떨어지고 성능 저하가 발생된다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="트랜잭션-격리성으로-생길-수-있는-이슈들">트랜잭션 격리성으로 생길 수 있는 이슈들<a href="https://ohju96.github.io/dev/1#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%83%9D%EA%B8%B8-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%9D%B4%EC%8A%88%EB%93%A4" class="hash-link" aria-label="트랜잭션 격리성으로 생길 ��수 있는 이슈들에 대한 직접 링크" title="트랜잭션 격리성으로 생길 수 있는 이슈들에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dirty-read">Dirty Read<a href="https://ohju96.github.io/dev/1#dirty-read" class="hash-link" aria-label="Dirty Read에 대한 직접 링크" title="Dirty Read에 대한 직접 링크">​</a></h3>
<p>Read Uncommitted 격리 수준에서 다른 트랜잭션이 아직 커밋되지 않은 데이터를 읽을 수 있는 이슈이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="non-repeatable-read">Non-Repeatable Read<a href="https://ohju96.github.io/dev/1#non-repeatable-read" class="hash-link" aria-label="Non-Repeatable Read에 대한 직접 링크" title="Non-Repeatable Read에 대한 직접 링크">​</a></h3>
<p>Read committed 단계에서 다른 트랜잭션이 커밋한 데이터를 읽을 수 있는 것을 의미한다. 한 트랜잭션에서 쿼리로 2번 이상 조회했을 때 그 결과가 상이한 이슈를 말한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="phantom-read">Phantom Read<a href="https://ohju96.github.io/dev/1#phantom-read" class="hash-link" aria-label="Phantom Read에 대한 직접 링크" title="Phantom Read에 대한 직접 링크">​</a></h3>
<p>Repeatable read 격리 수준에서 한 트랜잭션이 동일한 쿼리를 두 번 실행할 때, 두 번째 실행에서는 다른 트랜잭션이 커밋한 데이터를 읽을 수 있는 이슈이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="결국-해결한-방법">결국 해결한 방법<a href="https://ohju96.github.io/dev/1#%EA%B2%B0%EA%B5%AD-%ED%95%B4%EA%B2%B0%ED%95%9C-%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="결국 해결한 방법에 대한 직접 링크" title="결국 해결한 방법에 대한 직접 링크">​</a></h2>
<p>결국 해결한 방법
조회 쿼리에 트랜잭션을 적용해 주었다.</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r userRepositoryImpl</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">FindByNickname</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> req </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">User</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">User</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Query</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">Where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NicknameEQ</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Nickname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">Only</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Golnag 예시를 보면 지금 이 Repository 로직은 트랜잭션을 사용하지 않는 조회이다.</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r userRepositoryImpl</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">FindByNickname</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> req </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">User</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tx </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">User</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> tx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Query</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">Where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NicknameEQ</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Nickname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">Only</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 Repository 로직은 트랜잭션을 사용하는 조회 로직이다.  Spring에서 <code>@Transactional</code>이라는 어노테이션을 사용해서 트랜잭션을 관리하지만 Golang의 Ent Orm에서는 Tx라는 트랜잭션을 직접 생성하여 주입해 주어야 한다.</p>
<p>조회 부분에 추가되는 트랜잭션은 Repeatable read 격리 수준에서 차이가 나기 때문에 이를 적용해 주어 해결했다.</p>]]></content:encoded>
            <category>개발</category>
        </item>
    </channel>
</rss>